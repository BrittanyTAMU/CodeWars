Imagine you have a digital clock which paints the whole screen with a color instead of showing you what time it is. While it looks good on your wall and you get to impress your guests, you also want to be able to tell what time it is. Luckily, the clock also prints the hex code in the bottom right of the screen. Using that, you should be able to tell the time, which is another way to impress your guests :)

The hex code will come to you in this format: #0d242c

And you will return the time in this format: hh:mm:ss

Note: The hexCode you will be provided will always be in the correct format. However, it might not point to a correct time. So make sure to throw an error if the time you have calculated is invalid.

solution:

function hexToTime(hexCode) {
  let hours = parseInt(hexCode.slice(1, 3), 16);
  let minutes = parseInt(hexCode.slice(3, 5), 16);
  let seconds = parseInt(hexCode.slice(5), 16);

  if (seconds >= 60 || minutes >= 60 || hours >= 24) {
    throw new Error("That's not a valid time!");
  }

  return [hours, minutes, seconds]
    .map((el) => el.toString().padStart(2, "0"))
    .join(":");
}
--------------------------------------------------------------------------------------------------------------------------------------------------
You received an array with two strings.
Create a function that will return their product as a string.
E.g.

input: ['3', '5'] => output: '15'
input: ['2', '-3'] => output: '-6'
input: ['9', '0'] => output: '0'

solution:
const arrMultiply = arr =>
  `${arr[0] * arr[1]}`;
  -----------------------------------------------------------------------------------------------------------------------------
  Create a function that will return true if the input is in the following date time format 01-09-2016 01:20 and false if it is not.

This Kata has been inspired by the Regular Expressions chapter from the book Eloquent JavaScript.
solution:

function dateChecker(date){
	return /^(\d\d-){2}\d{4} \d\d:\d\d$/.test(date);
}
------------------------------------------------------------------------------------------------------------------------
Your dad doesn't really get punctuation, and he's always putting extra commas in when he posts. You can tolerate the run-on sentences, as he does actually talk like that, but those extra commas have to go!

Write a function that takes a string as an argument and returns a string with the extraneous commas removed. The returned string should not end with a comma or have any trailing whitespace.
solution:
const dadFilter = (str) =>
	str
		.trim()
		.split(',')
		.filter((c) => c)
		.join(',');
  ---------------------------------------------------------------------------------------------------------------------------------
  Your objective is to count how many times a certain word or combination of letters or symbols appears inside a string. The key is case insensitive and can occur as many or as few times in the string. The function declaration is provided for you and there should be two arguments with one return variable that returns the count. Overlapping words should not be counted more than once! An empty string cannot be a key. The function should also be able to count the number of integers and characters. Think hard!

Example:

countCombinations('my name is billy and billy is awesome', 'billy'); // 2
countCombinations('abcdefghijklmonopolymonorailqrstuv', 'mono'); // 2
countCombinations('GrEggreGGREGgREG', 'greg'); // 4
countCombinations('@#$##@@@','@'); // 4
countCombinations('wow nothing', 'yeah'); // 0
countCombinations('lololololol', 'lol'); // 3
countCombinations('93049', '\\d'); // 5
countCombinations('Five ', '\.'); // 5
Please give feedback and rank! That would be amazing!

solution:
function countCombinations(str, key) {
  if (!key || typeof key !== 'string') return 0; // Ensure the key is a non-empty string
  
  const regex = new RegExp(key, 'gi'); // Create a case-insensitive global regex
  const matches = str.match(regex); // Find all matches in the string
  
  return matches ? matches.length : 0; // Return the count of matches or 0 if none
}
